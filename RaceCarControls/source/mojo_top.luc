module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    .rst(~rst_n) {
      /*avr_interface avr;
      dff ch;
      dff values[2][8];
      counter cnt(#SIZE(24));*/
      analoginputs ai(#SIZE(2));
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    /*avr.cclk = cclk;
    avr.spi_ss = spi_ss;
    avr.spi_mosi = spi_mosi;
    avr.spi_sck = spi_sck;
    avr.rx = avr_tx;
    avr.tx_block = avr_rx_busy;*/
    
    led = 8h00;             // turn LEDs off
    //spi_miso = bz;          // not using SPI
    //spi_channel = bzzzz;    // not using flags
    //avr_rx = bz;            // not using serial port
    
    /*spi_miso = avr.spi_miso;
    spi_channel = avr.spi_channel;
    avr_rx = avr.tx;
    
    // unused serial port
    avr.new_tx_data = 0;
    avr.tx_data = 8hxx;
    
    avr.channel = ch.q;
    
    if (avr.new_sample) {
      ch.d = ch.q + 1;
    }

    io_led = 3x{{8h00}};    // turn LEDs off
    if (&cnt.value == 1) {
      values.d[avr.sample_channel] = avr.sample[9:2];
    }
    io_led[1:0] = values.q;*/

    ai.cclk = cclk;
    ai.spi_ss = spi_ss;
    ai.spi_mosi = spi_mosi;
    ai.spi_sck =  spi_sck;
    ai.avr_rx = avr_tx;
    ai.avr_rx_busy = avr_rx_busy;
    spi_miso = ai.spi_miso;
    spi_channel = ai.spi_channel;
    avr_rx = ai.avr_tx;

    io_led = 3x{{8h00}};    // turn LEDs off
    io_led[1:0] = {ai.out[1][9:2], ai.out[0][9:2]};

    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
  }
}