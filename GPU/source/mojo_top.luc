module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  //dotprod dp;
  //matvecmul mvm;
  //matmul mm;
  //filtershape filter0;
  //filtershape filter1;
  //split sp;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    /*dp.vec1 = 4x{{16h1001}};
    dp.vec2 = 4x{{16h35}};
    sp.in = dp.out;
    io_led[1:0] = sp.out;  // 16hD40 (after truncating bottom and top 8 bits)*/
    
    /*mvm.mat = 4x{{4x{{16h203}}}};
    mvm.vec = 4x{{16h10}};
    sp.in = mvm.out[0];
    io_led[1:0] = sp.out;  // 16h80 (after truncating bottom and top 8 bits)*/
    
    /*mm.mat1 = 4x{{4x{{16h40}}}};
    mm.mat2 = 4x{{4x{{16h11}}}};
    sp.in = mm.out[0][0];
    io_led[1:0] = sp.out;  // 16h11 (after truncating bottom and top 8 bits)*/
    
    /*filter0.shape = 3x{{{16hf00, 16h0, 16h0}}};
    filter1.shape = 3x{{{16h0, 16h0, 16h0}}};
    filter0.range = 3x{{{16h100, -(16h100)}}};
    filter1.range = 3x{{{16h100, -(16h100)}}};
    io_led[0] = filter0.out;  // 0
    io_led[1] = filter1.out;  // 1*/
    //led[1] = 0 >= -(8b1) & 0 <= 8b1;  // Checking that we don't need brackets for <= and >=
    //led[2] = (&2b11) & (&4hf);  // Checking that we need the brackets for ANDing reduced signals
    //meow = 3x{{{16h0, 16h0, 16h0}}};
    //moo = 3x{{{16h100, -(16h100)}}};
    //led[4] = $signed(meow[0][0]) >= $signed(moo[0][0]);// & (meow[0][0] <= moo[0][1]); // Checking that we need to use signed numbers
    //led = -(8b1);  // Just making sure the negative on literals work (all should light up)
  }
}