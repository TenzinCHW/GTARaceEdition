module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield. Order is Up, Centre, Down, Left, Right
    input io_dip [3][8]     // DIP switches on IO Shield. 0 is on the RHS.
  ) {
  
  sig rst;                  // reset signal
  //dotprod dp;
  //matvecmul mvm;
  matmul mm;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner change_state;
    edge_detector ed;
    .rst(rst) {
      dff vals[8][16];
      dff state[3];
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    change_state.in = io_button[1];
    ed.in = change_state.out;
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    if (ed.out) {
      vals.d[state.q] = c{io_dip[1], io_dip[0]};
      state.d = state.q + 1;
    }
    io_led[2] = vals.q[state.q];
    
/*    mvm.mat = 2x{{2x{{8h2}}}};
    mvm.vec = 2x{{8h1}};
    io_led[1] = mvm.out[1];*/
    
    mm.mat1 = 4x{{4x{{16h10}}}};
    mm.mat2 = 4x{{4x{{16h11}}}};
    io_led[1] = mm.out[0][0];
    //io_led[1:0] = c{{mm.out[0][0][15:8], mm.out[0][0][7:0]}};
    
//    dp.vec1 = c{{vals.q[0], vals.q[1], vals.q[2], vals.q[3]}};
//    dp.vec2 = c{{vals.q[4], vals.q[5], vals.q[6], vals.q[7]}};
//    dp.vec1 = 4x{{16h1001}};
//    dp.vec2 = 4x{{16h0035}};
//    io_led[1:0] = c{{dp.out[15:8], dp.out[7:0]}};

  }
}