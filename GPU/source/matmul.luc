// This module will perform matrix multiplication between two matrices, mat1 and mat2
// REQUIREMENT: 1 cycle

module matmul  #(
    NBITS = 16 : NBITS > 1, // number of bits for each element
    HT = 4 : HT > 0, // height of mat1
    M = 4 : M > 0, // width of mat1 = height of mat2
    WD = 4 : WD > 0, // width of mat2
    QUOTIENT = 8 : QUOTIENT >= 0 // number of bits to represent decimals
  )(
    input mat1[HT][M][NBITS],
    input mat2[M][WD][NBITS],
    output out[HT][WD][NBITS]
  ) {

//  dotprod dp[HT][WD] (#NBITS(NBITS), #SZ(M), #QUOTIENT(QUOTIENT));
  sig mul[HT][WD][NBITS * 2];
  var i, j, k;

  always {
    mul = HTx{{WDx{{(NBITS * 2)x{0}}}}};
    for (i = 0; i < HT; i++) {
      for (j = 0; j < WD; j++) {
        for (k = 0; k < M; k++) {
            mul[i][j] = mul[i][j] + mat1[i][k] * mat2[k][j];
        }
      }
    }

    for (i = 0; i < HT; i++) {
      for (j = 0; j < WD; j++) {
        for (k = 0; k < M; k++) {
            out[i][j] = mul[i][j][NBITS + QUOTIENT - 1:QUOTIENT];
        }
      }
    }
/*    for (i = 0; i < HT; i++) {
      for (j = 0; j < WD; j++) {
        dp.vec1[i][j] = mat1[i];
        for (k = 0; k < M; k++) {
          dp.vec2[i][j][k] = mat2[k][j];
        }
      }
    }
    out = dp.out;*/
  }
}
